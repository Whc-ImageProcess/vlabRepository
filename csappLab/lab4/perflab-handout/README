#####################################################################
# CS:APP Performance Lab
#
# Student's Source Files
#
# Copyright (c) 2002, R. Bryant and D. O'Hallaron, All rights reserved.
# May not be used, modified, or copied without permission.
#
######################################################################

This directory contains the files you will need for the CS:APP
Performance Lab.

kernels.c
	This is the file you will be modifying and handing in. 

#########################################
# You shouldn't modify any of these files
#########################################
driver.c
	This is the driver that tests the performance of all 
	of the versions of the rotate and smooth kernels 
	in your kernels.c file.

config.h
	This is a site-specific configuration file that was created by 
	your instructor	for your system.

defs.h
	Various definitions needed by kernels.c and driver.c

clock.{c,h}
fcyc.{c,h}
	These contain timing routines that measure the performance of your
	code with our k-best measurement scheme using IA32 cycle counters.

Makefile:
	This is the makefile that builds the driver program.


## 查看L1/L2/L3 cache大小
root@VM5811-oslab:~/vsCodeProjects/csappLab/lab4/perflab-handout# getconf -a | grep CACHE
LEVEL1_ICACHE_SIZE                 32768
LEVEL1_ICACHE_ASSOC                8
LEVEL1_ICACHE_LINESIZE             64
LEVEL1_DCACHE_SIZE                 32768
LEVEL1_DCACHE_ASSOC                8
LEVEL1_DCACHE_LINESIZE             64
LEVEL2_CACHE_SIZE                  1048576
LEVEL2_CACHE_ASSOC                 16
LEVEL2_CACHE_LINESIZE              64
LEVEL3_CACHE_SIZE                  11534336
LEVEL3_CACHE_ASSOC                 11
LEVEL3_CACHE_LINESIZE              64
LEVEL4_CACHE_SIZE                  0
LEVEL4_CACHE_ASSOC                 0
LEVEL4_CACHE_LINESIZE              0
root@VM5811-oslab:~/vsCodeProjects/csappLab/lab4/perflab-handout# cat /sys/devices/system/cpu/cpu0/cache/index0/level
1
root@VM5811-oslab:~/vsCodeProjects/csappLab/lab4/perflab-handout# cat /sys/devices/system/cpu/cpu0/cache/index0/type
Data
root@VM5811-oslab:~/vsCodeProjects/csappLab/lab4/perflab-handout# cat /sys/devices/system/cpu/cpu0/cache/index0/size
32K

## appendix
ls -l /sys/devices/system/cpu/cpu0/cache/index
index0/ index1/ index2/
index0和Index1是一级cache中的data和instruction cache
ls -l /sys/devices/system/cpu/cpu0/cache/index0/
level：cache等级 L1/L2/L3
type：cache类型， （Data Cache，D-Cache）和一级指令缓存（Instruction Cache，I-Cache）
size： cache大小
一级缓存可以分为一级数据缓存（Data Cache，D-Cache）和一级指令缓存（Instruction Cache，I-Cache）。
二者分别用来存放数据以及对执行这些数据的指令进行即时解码，而且两者可以同时被CPU访问，
减少了争用Cache所造成的冲突，提高了处理器效能。目前大多数CPU的一级数据缓存和一级指令缓存具有相同的容量.


## rotate
```
// 步长太长，导致cache的命中率非常低，所以总体运算效率低。
// 因此，我们考虑到cache的大小，应在存储的时候进行32个像素依次存储（列存储）。
// （32个像素排列是为了充分利用一级缓存(32KB), 采用分块策略, 每一个块大小为32）
// 这样可以做到cache友好、可以大幅度提高效率。
// 宏定义一个复制函数，方便程序编写
#define COPY(d, s) *(d) = *(s)
char rotate_descr[] = "rotate: Currentworking version";
void rotate(int dim, pixel *src, pixel *dst)
{
    int i, j;
    pixel *dptr = dst, *sptr = src;
    for (i = 0; i < dim; i += 32) // 32路循环展开，32个像素依次存储
        for (j = dim - 1; j >= 0; j -= 1)
        {
            dptr = dst + RIDX(dim - 1 - j, i, dim);
            sptr = src + RIDX(i, j, dim);
            // 进行复制操作
            COPY(dptr, sptr);
            sptr += dim;
            COPY(dptr + 1, sptr);
            sptr += dim;
            COPY(dptr + 2, sptr);
            sptr += dim;
            COPY(dptr + 3, sptr);
            sptr += dim;
            COPY(dptr + 4, sptr);
            sptr += dim;
            COPY(dptr + 5, sptr);
            sptr += dim;
            COPY(dptr + 6, sptr);
            sptr += dim;
            COPY(dptr + 7, sptr);
            sptr += dim;
            COPY(dptr + 8, sptr);
            sptr += dim;
            COPY(dptr + 9, sptr);
            sptr += dim;
            COPY(dptr + 10, sptr);
            sptr += dim;
            COPY(dptr + 11, sptr);
            sptr += dim;
            COPY(dptr + 12, sptr);
            sptr += dim;
            COPY(dptr + 13, sptr);
            sptr += dim;
            COPY(dptr + 14, sptr);
            sptr += dim;
            COPY(dptr + 15, sptr);
            sptr += dim;
            COPY(dptr + 16, sptr);
            sptr += dim;
            COPY(dptr + 17, sptr);
            sptr += dim;
            COPY(dptr + 18, sptr);
            sptr += dim;
            COPY(dptr + 19, sptr);
            sptr += dim;
            COPY(dptr + 20, sptr);
            sptr += dim;
            COPY(dptr + 21, sptr);
            sptr += dim;
            COPY(dptr + 22, sptr);
            sptr += dim;
            COPY(dptr + 23, sptr);
            sptr += dim;
            COPY(dptr + 24, sptr);
            sptr += dim;
            COPY(dptr + 25, sptr);
            sptr += dim;
            COPY(dptr + 26, sptr);
            sptr += dim;
            COPY(dptr + 27, sptr);
            sptr += dim;
            COPY(dptr + 28, sptr);
            sptr += dim;
            COPY(dptr + 29, sptr);
            sptr += dim;
            COPY(dptr + 30, sptr);
            sptr += dim;
            COPY(dptr + 31, sptr);
        }
}
```



## smooth 
```
char smooth_descr[] = "smooth: Current working version";
void smooth(int dim, pixel *src, pixel *dst)
{
    int i, j, t;
    // 边缘四角：左上角
    i = 0;
    j = 0;
    dst[0].blue = (src[0].blue + src[1].blue + src[dim].blue + src[dim + 1].blue) >> 2;
    dst[0].green = (src[0].green + src[1].green + src[dim].green + src[dim + 1].green) >> 2;
    dst[0].red = (src[0].red + src[1].red + src[dim].red + src[dim + 1].red) >> 2;
    // 非四角：上
    i = 0;
    for (j = 1; j <= dim - 2; j++)
    {
        dst[j].blue = (src[RIDX(i, j - 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i, j + 1, dim)].blue + src[RIDX(i + 1, j - 1, dim)].blue + src[RIDX(i + 1, j, dim)].blue + src[RIDX(i + 1, j + 1, dim)].blue) / 6;
        dst[j].green = (src[RIDX(i, j - 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i, j + 1, dim)].green + src[RIDX(i + 1, j - 1, dim)].green + src[RIDX(i + 1, j, dim)].green + src[RIDX(i + 1, j + 1, dim)].green) / 6;
        dst[j].red = (src[RIDX(i, j - 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i, j + 1, dim)].red + src[RIDX(i + 1, j - 1, dim)].red + src[RIDX(i + 1, j, dim)].red + src[RIDX(i + 1, j + 1, dim)].red) / 6;
    }
    // 边缘四角：右上角
    i = 0;
    j = dim - 1;
    dst[dim - 1].blue = (src[RIDX(i, j - 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i + 1, j - 1, dim)].blue + src[RIDX(i + 1, j, dim)].blue) >> 2;
    dst[dim - 1].green = (src[RIDX(i, j - 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i + 1, j - 1, dim)].green + src[RIDX(i + 1, j, dim)].green) >> 2;
    dst[dim - 1].red = (src[RIDX(i, j - 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i + 1, j - 1, dim)].red + src[RIDX(i + 1, j, dim)].red) >> 2;
    // 非四角：左
    j = 0;
    for (i = 1; i <= dim - 2; i++)
    {
        dst[RIDX(i, j, dim)].blue = (src[RIDX(i - 1, j, dim)].blue + src[RIDX(i - 1, j + 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i, j + 1, dim)].blue + src[RIDX(i + 1, j, dim)].blue + src[RIDX(i + 1, j + 1, dim)].blue) / 6;
        dst[RIDX(i, j, dim)].green = (src[RIDX(i - 1, j, dim)].green + src[RIDX(i - 1, j + 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i, j + 1, dim)].green + src[RIDX(i + 1, j, dim)].green + src[RIDX(i + 1, j + 1, dim)].green) / 6;
        dst[RIDX(i, j, dim)].red = (src[RIDX(i - 1, j, dim)].red + src[RIDX(i - 1, j + 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i, j + 1, dim)].red + src[RIDX(i + 1, j, dim)].red + src[RIDX(i + 1, j + 1, dim)].red) / 6;
    }
    // 中心点
    for (i = 1; i <= dim - 2; i++)
    {
        t = i * dim;
        for (j = 1; j <= dim - 2; j++)
        {
            dst[t + j].blue = (src[RIDX(i - 1, j - 1, dim)].blue + src[RIDX(i - 1, j, dim)].blue + src[RIDX(i - 1, j + 1, dim)].blue + src[RIDX(i, j - 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i, j + 1, dim)].blue + src[RIDX(i + 1, j - 1, dim)].blue + src[RIDX(i + 1, j, dim)].blue + src[RIDX(i + 1, j + 1, dim)].blue) / 9;
            dst[t + j].green = (src[RIDX(i - 1, j - 1, dim)].green + src[RIDX(i - 1, j, dim)].green + src[RIDX(i - 1, j + 1, dim)].green + src[RIDX(i, j - 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i, j + 1, dim)].green + src[RIDX(i + 1, j - 1, dim)].green + src[RIDX(i + 1, j, dim)].green + src[RIDX(i + 1, j + 1, dim)].green) / 9;
            dst[t + j].red = (src[RIDX(i - 1, j - 1, dim)].red + src[RIDX(i - 1, j, dim)].red + src[RIDX(i - 1, j + 1, dim)].red + src[RIDX(i, j - 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i, j + 1, dim)].red + src[RIDX(i + 1, j - 1, dim)].red + src[RIDX(i + 1, j, dim)].red + src[RIDX(i + 1, j + 1, dim)].red) / 9;
        }
    }
    // 非四角：右
    j = dim - 1;
    for (i = 1; i <= dim - 2; i++)
    {
        dst[RIDX(i, j, dim)].blue = (src[RIDX(i - 1, j - 1, dim)].blue + src[RIDX(i - 1, j, dim)].blue + src[RIDX(i, j - 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i + 1, j - 1, dim)].blue + src[RIDX(i + 1, j, dim)].blue) / 6;
        dst[RIDX(i, j, dim)].green = (src[RIDX(i - 1, j - 1, dim)].green + src[RIDX(i - 1, j, dim)].green + src[RIDX(i, j - 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i + 1, j - 1, dim)].green + src[RIDX(i + 1, j, dim)].green) / 6;
        dst[RIDX(i, j, dim)].red = (src[RIDX(i - 1, j - 1, dim)].red + src[RIDX(i - 1, j, dim)].red + src[RIDX(i, j - 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i + 1, j - 1, dim)].red + src[RIDX(i + 1, j, dim)].red) / 6;
    }
    // 边缘四角：左下角
    i = dim - 1;
    j = 0;
    dst[RIDX(i, j, dim)].blue = (src[RIDX(i - 1, j, dim)].blue + src[RIDX(i - 1, j + 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i, j + 1, dim)].blue) >> 2;
    dst[RIDX(i, j, dim)].green = (src[RIDX(i - 1, j, dim)].green + src[RIDX(i - 1, j + 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i, j + 1, dim)].green) >> 2;
    dst[RIDX(i, j, dim)].red = (src[RIDX(i - 1, j, dim)].red + src[RIDX(i - 1, j + 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i, j + 1, dim)].red) >> 2;
    // 非四角：下
    i = dim - 1;
    for (j = 1; j <= dim - 2; j++)
    {
        dst[RIDX(i, j, dim)].blue = (src[RIDX(i - 1, j - 1, dim)].blue + src[RIDX(i - 1, j, dim)].blue + src[RIDX(i - 1, j + 1, dim)].blue + src[RIDX(i, j - 1, dim)].blue + src[RIDX(i, j, dim)].blue + src[RIDX(i, j + 1, dim)].blue) / 6;
        dst[RIDX(i, j, dim)].green = (src[RIDX(i - 1, j - 1, dim)].green + src[RIDX(i - 1, j, dim)].green + src[RIDX(i - 1, j + 1, dim)].green + src[RIDX(i, j - 1, dim)].green + src[RIDX(i, j, dim)].green + src[RIDX(i, j + 1, dim)].green) / 6;
        dst[RIDX(i, j, dim)].red = (src[RIDX(i - 1, j - 1, dim)].red + src[RIDX(i - 1, j, dim)].red + src[RIDX(i - 1, j + 1, dim)].red + src[RIDX(i, j - 1, dim)].red + src[RIDX(i, j, dim)].red + src[RIDX(i, j + 1, dim)].red) / 6;
    }
    // 边缘四角：右下角
    i = dim - 1;
    j = dim - 1;
    dst[RIDX(i, j, dim)].blue = (src[RIDX(i - 1, j - 1, dim)].blue + src[RIDX(i - 1, j, dim)].blue + src[RIDX(i, j - 1, dim)].blue + src[RIDX(i, j, dim)].blue) >> 2;
    dst[RIDX(i, j, dim)].green = (src[RIDX(i - 1, j - 1, dim)].green + src[RIDX(i - 1, j, dim)].green + src[RIDX(i, j - 1, dim)].green + src[RIDX(i, j, dim)].green) >> 2;
    dst[RIDX(i, j, dim)].red = (src[RIDX(i - 1, j - 1, dim)].red + src[RIDX(i - 1, j, dim)].red + src[RIDX(i, j - 1, dim)].red + src[RIDX(i, j, dim)].red) >> 2;
}
```

## 最终测试的结果
```
root@VM5811-oslab:~/vsCodeProjects/csappLab/lab4/perflab-handout# make driver 
gcc -Wall -O2 -m32   -c -o kernels.o kernels.c
gcc -Wall -O2 -m32 driver.o kernels.o fcyc.o clock.o -lm -o driver
root@VM5811-oslab:~/vsCodeProjects/csappLab/lab4/perflab-handout# ./driver 
Teamname: SA21218058
Member 1: Hanchun Wang
Email 1: 3235086327@qq.com

Rotate: Version = naive_rotate: Naive baseline implementation:
Dim		        256	512	1024	2048	4096	Mean
Your CPEs	    5.1	8.8	14.5	41.4	49.1
Baseline CPEs	14.7	40.1	46.4	65.9	94.5
Speedup		    2.9	4.5	3.2	1.6	1.9	2.6

Rotate: Version = rotate: Currentworking version:
Dim		        256	512	1024	2048	4096	Mean
Your CPEs	    2.0	2.6	4.0	5.7	6.4
Baseline CPEs	14.7	40.1	46.4	65.9	94.5
Speedup		    7.4	15.4	11.6	11.5	14.8	11.7

Smooth: Version = smooth: Current working version:
Dim		        256	512	1024	2048	4096	Mean
Your CPEs	    15.9	14.9	16.6	17.7	17.8
Baseline CPEs	695.0	698.0	702.0	717.0	722.0
Speedup		    43.7	46.9	42.4	40.4	40.5	42.7

Smooth: Version = naive_smooth: Naive baseline implementation:
Dim		        256	512	1024	2048	4096	Mean
Your CPEs	    60.6	64.7	68.2	70.9	74.1
Baseline CPEs	695.0	698.0	702.0	717.0	722.0
Speedup		    11.5	10.8	10.3	10.1	9.7	10.5

Summary of Your Best Scores:
  Rotate: 11.7 (rotate: Currentworking version)
  Smooth: 42.7 (smooth: Current working version)
```